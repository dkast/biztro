generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[] @relation("Memberships")
  role          Role         @default(USER) // Deprecated
  Site          Site[] // Deprecated
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Membership {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           MembershipRole
  user           User           @relation("Memberships", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  isActive       Boolean        @default(true)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([organizationId, userId])
  @@index([userId])
}

model Organization {
  id           String             @id @default(cuid())
  name         String             @unique
  description  String?
  logo         String?
  banner       String?
  status       OrganizationStatus @default(ACTIVE)
  plan         OrganizationPlan   @default(TRIAL)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  subdomain    String             @unique
  customDomain String?            @unique
  memberships  Membership[]
  menus        Menu[]
  menuItems    MenuItem[]
}

model Menu {
  id             String       @id @default(cuid())
  name           String
  description    String?
  status         MenuStatus   @default(DRAFT)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  data           String?      @db.Text
}

model MenuItem {
  id             String       @id @default(cuid())
  name           String
  description    String?
  image          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  variants       Variant[]
}

model Variant {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId  String
}

// Deprecated
model Site {
  id            String   @id @default(cuid())
  name          String?
  description   String?  @db.Text
  logo          String?
  image         String?  @db.Text
  imageBlurhash String?  @db.LongText
  phone         String?
  subdomain     String?  @unique
  customDomain  String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  serialData    String?  @db.LongText
  published     Boolean  @default(false)
  items         Item[]
}

// Deprecated
model Item {
  id            String   @id @default(cuid())
  title         String?
  description   String?  @db.Text
  extras        String?  @db.Text
  price         Float?
  image         String?  @db.Text
  imageBlurhash String?  @db.LongText
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId        String?

  @@unique([id, siteId], name: "post_site_constraint")
  @@index([siteId])
}

model Invite {
  id    String @id @default(cuid())
  email String @unique

  @@index([email])
}

// Deprecated
enum Role {
  USER
  PRO
  ADMIN
}

enum OrganizationStatus {
  ACTIVE
  DUE
  INACTIVE
}

enum OrganizationPlan {
  TRIAL
  BASIC
  PRO
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
}

enum MenuStatus {
  DRAFT
  PUBLISHED
}
