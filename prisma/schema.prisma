generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../local.db"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[] @relation("Memberships")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Membership {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  role           String       @default("MEMBER")
  user           User         @relation("Memberships", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  isActive       Boolean      @default(true)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([organizationId, userId])
  @@index([userId])
}

model Organization {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  logo         String?
  banner       String?
  status       String       @default("ACTIVE")
  plan         String       @default("BASIC")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subdomain    String       @unique
  customDomain String?      @unique
  memberships  Membership[]
  menus        Menu[]
  menuItems    MenuItem[]
  Location     Location[]
}

model Location {
  id             String       @id @default(cuid())
  name           String       @default("Main")
  description    String?
  address        String
  phone          String?
  facebook       String?
  instagram      String?
  twitter        String?
  tiktok         String?
  whatsapp       String?
  website        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
}

model Menu {
  id             String       @id @default(cuid())
  name           String
  description    String?
  status         String       @default("DRAFT")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  data           String?
}

model MenuItem {
  id             String       @id @default(cuid())
  name           String
  description    String?
  image          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  variants       Variant[]
}

model Variant {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId  String
}

model Invite {
  id    String @id @default(cuid())
  email String @unique

  @@index([email])
}

// Deprecated
// enum Role {
//   USER
//   PRO
//   ADMIN
// }

// enum OrganizationStatus {
//   ACTIVE
//   DUE
//   INACTIVE
// }

// enum OrganizationPlan {
//   BASIC
//   PRO
// }

// enum MembershipRole {
//   ADMIN
//   SUPER_ADMIN
//   MEMBER
// }

// enum MenuStatus {
//   DRAFT
//   PUBLISHED
// }
