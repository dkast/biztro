generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../local.db"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  memberships   Membership[] @relation("Memberships")
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Membership {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           String         @default("OWNER")
  userId         String
  isActive       Boolean        @default(true)
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User           @relation("Memberships", fields: [userId], references: [id], onDelete: Cascade)
  teamInvites    TeamInvite[]
  subscriptions  Subscription[]
  customer       Customer[]

  @@unique([organizationId, userId])
  @@index([userId])
}

model Organization {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  logo         String?
  banner       String?
  status       String       @default("ACTIVE")
  plan         String       @default("BASIC")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subdomain    String       @unique
  customDomain String?      @unique
  categories   Category[]
  location     Location[]
  memberships  Membership[]
  menus        Menu[]
  menuItems    MenuItem[]
  themes       Theme[]
  teamInvite   TeamInvite[]
}

model Location {
  id             String         @id @default(cuid())
  name           String         @default("Main")
  description    String?
  address        String
  phone          String?
  facebook       String?
  instagram      String?
  twitter        String?
  tiktok         String?
  whatsapp       String?
  website        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  openingHours   OpeningHours[]
}

model OpeningHours {
  id         String   @id @default(cuid())
  day        String
  startTime  String?
  endTime    String?
  allDay     Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Menu {
  id             String       @id @default(cuid())
  name           String
  description    String?
  status         String       @default("DRAFT")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  serialData     String?
  publishedData  String?
  publishedAt    DateTime?
  fontTheme      String       @default("DEFAULT")
  colorTheme     String       @default("DEFAULT")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Theme {
  id             String        @id @default(cuid())
  name           String
  scope          String        @default("CUSTOM")
  themeType      String        @default("FONT")
  themeJSON      String        @default("{}")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name, scope])
}

model MenuItem {
  id             String       @id @default(cuid())
  name           String
  description    String?
  image          String?
  status         String       @default("DRAFT")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  categoryId     String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category       Category?    @relation(fields: [categoryId], references: [id])
  variants       Variant[]

  @@unique([organizationId, name])
}

model Category {
  id             String       @id @default(cuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  menuItems      MenuItem[]
}

model Variant {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menuItemId  String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
}

model Invite {
  id      String  @id @default(cuid())
  email   String  @unique
  enabled Boolean @default(false)

  @@index([email])
}

model TeamInvite {
  id             String       @id @default(cuid())
  email          String
  token          String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           String       @default("MEMBER")
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  expiresAt      DateTime
  acceptedAt     DateTime?
  invitedById    String
  invitedBy      Membership   @relation(fields: [invitedById], references: [id])

  @@unique([organizationId, email])
  @@index([token])
}

model Customer {
  stripeCustomerId String     @id
  membership       Membership @relation(fields: [membershipId], references: [id])
  membershipId     String
}

model Subscription {
  id                 String     @id
  status             String
  metadata           String
  priceId            String?
  quantity           Int
  cancelAtPeriodEnd  Boolean    @default(false)
  created            DateTime   @default(now())
  currentPeriodStart DateTime   @default(now())
  currentPeriodEnd   DateTime   @default(now())
  endedAt            DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  membership         Membership @relation(fields: [membershipId], references: [id])
  membershipId       String
}
