generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  title         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  sites         Site[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Site {
  id            String   @id @default(cuid())
  name          String?
  description   String?  @db.Text
  logo          String?
  image         String?  @db.Text
  imageBlurhash String?  @db.LongText
  phone         String?
  subdomain     String?  @unique
  customDomain  String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  serialData    String?  @db.LongText
  published     Boolean  @default(false)
  items         Item[]
}

model Item {
  id            String   @id @default(cuid())
  title         String?
  description   String?  @db.Text
  extras        String?  @db.Text
  price         Float?
  image         String?  @db.Text
  imageBlurhash String?  @db.LongText
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId        String?

  @@unique([id, siteId], name: "post_site_constraint")
  @@index([siteId])
}

model Invite {
  id    String @id @default(cuid())
  email String @unique

  @@index([email])
}

enum Role {
  USER
  PRO
  ADMIN
}
