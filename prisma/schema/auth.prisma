// Better Auth related models moved here

model Account {
  id                       String    @id @default(cuid())
  userId                   String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               DateTime?
  scope                    String?
  id_token                 String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  password  String?
  createdAt DateTime
  updatedAt DateTime

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  activeOrganizationId String?

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String?      @unique
  emailVerified Boolean?     @default(false)
  image         String?
  accounts      Account[]
  memberships   Membership[] @relation("Memberships")
  sessions      Session[]
  createdAt     DateTime
  updatedAt     DateTime
  members       Member[]
  invitations   Invitation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Planned to remove once the organization plugin is fully integrated
model Membership {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           String         @default("OWNER")
  userId         String
  isActive       Boolean        @default(true)
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User           @relation("Memberships", fields: [userId], references: [id], onDelete: Cascade)
  teamInvites    TeamInvite[]
  subscriptions  Subscription[]
  customer       Customer[]

  @@unique([organizationId, userId])
  @@index([userId])
}

model Organization {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  logo          String?
  banner        String?
  status        String         @default("ACTIVE")
  plan          String         @default("BASIC")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subdomain     String         @unique
  customDomain  String?        @unique
  categories    Category[]
  location      Location[]
  memberships   Membership[]
  menus         Menu[]
  menuItems     MenuItem[]
  themes        Theme[]
  teamInvite    TeamInvite[]
  subscriptions Subscription[]

  slug        String?
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@index([subdomain])
}

// Planned to remove and use the invitation system from BetterAuth
model TeamInvite {
  id             String       @id @default(cuid())
  email          String
  token          String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           String       @default("MEMBER")
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  expiresAt      DateTime
  acceptedAt     DateTime?
  invitedById    String
  invitedBy      Membership   @relation(fields: [invitedById], references: [id])

  @@unique([organizationId, email])
  @@index([token])
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
}
